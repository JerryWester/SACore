const encoding: Record<string, string> = {
    '0': '', //terminates string
    '1': '!',
    '2': '"',
    '3': '#',
    '4': '$',
    '5': '%',
    '6': '&',
    '7': '\\',
    '8': '(',
    '9': ')',
    '10': '*',
    '11': '+',
    '12': ',',
    '13': '-',
    '14': '.',
    '15': '/',
    '16': '0',
    '17': '1',
    '18': '2',
    '19': '3',
    '20': '4',
    '21': '5',
    '22': '6',
    '23': '7',
    '24': '8',
    '25': '9',
    '26': ':',
    '27': ';',
    '28': '<',
    '29': '=',
    '30': '>',
    '31': '?',
    '32': '@',
    '33': 'A',
    '34': 'B',
    '35': 'C',
    '36': 'D',
    '37': 'E',
    '38': 'F',
    '39': 'G',
    '40': 'H',
    '41': 'I',
    '42': 'J',
    '43': 'K',
    '44': 'L',
    '45': 'M',
    '46': 'N',
    '47': 'O',
    '48': 'P',
    '49': 'Q',
    '50': 'R',
    '51': 'S',
    '52': 'T',
    '53': 'U',
    '54': 'V',
    '55': 'W',
    '56': 'X',
    '57': 'Y',
    '58': 'Z',
    '59': '[',
    '60': '¥',
    '61': ']',
    '62': '^',
    '63': '_',
    '64': '\'',
    '65': 'a',
    '66': 'b',
    '67': 'c',
    '68': 'd',
    '69': 'e',
    '70': 'f',
    '71': 'g',
    '72': 'h',
    '73': 'i',
    '74': 'j',
    '75': 'k',
    '76': 'l',
    '77': 'm',
    '78': 'n',
    '79': 'o',
    '80': 'p',
    '81': 'q',
    '82': 'r',
    '83': 's',
    '84': 't',
    '85': 'u',
    '86': 'v',
    '87': 'w',
    '88': 'x',
    '89': 'y',
    '90': 'z',
    '91': '{',
    '92': '|',
    '93': '}',
    '94': '~',
    '95': ' ',
    '96': 'À',
    '97': 'Á',
    '98': 'Â',
    '99': 'Ã',
    '100': 'Ä',
    '101': 'Å',
    '102': 'Æ',
    '103': 'Ç',
    '104': 'È',
    '105': 'É',
    '106': 'Ê',
    '107': 'Ë',
    '108': 'Ì',
    '109': 'Í',
    '110': 'Î',
    '111': 'Ï',
    '112': 'Ð',
    '113': 'Ñ',
    '114': 'Ò',
    '115': 'Ó',
    '116': 'Ô',
    '117': 'Õ',
    '118': 'Ö',
    '119': '¿',
    '120': 'Ø',
    '121': 'Ù',
    '122': 'Ú',
    '123': 'Û',
    '124': 'Ü',
    '125': 'Ý',
    '126': 'Þ',
    '127': 'ß',
    '128': 'à',
    '129': 'á',
    '130': 'â',
    '131': 'ã',
    '132': 'ä',
    '133': 'å',
    '134': 'æ',
    '135': 'ç',
    '136': 'è',
    '137': 'é',
    '138': 'ê',
    '139': 'ë',
    '140': 'ì',
    '141': 'í',
    '142': 'î',
    '143': 'ï',
    '144': 'ð',
    '145': 'ñ',
    '146': 'ò',
    '147': 'ó',
    '148': 'ô',
    '149': 'õ',
    '150': 'ö',
    '151': '¡',
    '152': 'ø',
    '153': 'ù',
    '154': 'ú',
    '155': 'û',
    '156': 'ü',
    '157': 'ý',
    '158': 'þ',
    '159': 'ÿ',
    '160': 'ァ',
    '161': 'ア',
    '162': 'ィ',
    '163': 'イ',
    '164': 'ゥ',
    '165': 'ウ',
    '166': 'ェ',
    '167': 'エ',
    '168': 'ォ',
    '169': 'オ',
    '170': 'カ',
    '171': 'ガ',
    '172': 'キ',
    '173': 'ギ',
    '174': 'ク',
    '175': 'グ',
    '176': 'ケ',
    '177': 'ゲ',
    '178': 'コ',
    '179': 'ゴ',
    '180': 'サ',
    '181': 'ザ',
    '182': 'シ',
    '183': 'ジ',
    '184': 'ス',
    '185': 'ズ',
    '186': 'セ',
    '187': 'ゼ',
    '188': 'ソ',
    '189': 'ゾ',
    '190': 'タ',
    '191': 'ダ',
    '192': 'チ',
    '193': 'ヂ',
    '194': 'ツ',
    '195': 'ッ',
    '196': 'ヅ',
    '197': 'テ',
    '198': 'デ',
    '199': 'ト',
    '200': 'ド',
    '201': 'ナ',
    '202': 'ニ',
    '203': 'ヌ',
    '204': 'ネ',
    '205': 'ノ',
    '206': 'ハ',
    '207': 'バ',
    '208': 'パ',
    '209': 'ヒ',
    '210': 'ビ',
    '211': 'ピ',
    '212': 'フ',
    '213': 'ブ',
    '214': 'プ',
    '215': 'ヘ',
    '216': 'ベ',
    '217': 'ペ',
    '218': 'ホ',
    '219': 'ボ',
    '220': 'ポ',
    '221': 'マ',
    '222': 'ミ',
    '223': 'ム',
    '224': 'メ',
    '225': 'モ',
    '226': 'ャ',
    '227': 'ヤ',
    '228': 'ュ',
    '229': 'ユ',
    '230': 'ョ',
    '231': 'ヨ',
    '232': 'ラ',
    '233': 'リ',
    '234': 'ル',
    '235': 'レ',
    '236': 'ロ',
    '237': 'ヮ',
    '238': 'ワ',
    '239': 'ﾞ',
    '240': 'ﾟ',
    '241': 'ヲ',
    '242': 'ン',
    '243': '。',
    '244': '、',
    '245': '〒',
    '246': '・',
    '247': '★',
    '248': '♀',
    '249': '♂',
    '250': '♪',
    '251': '…',
    '252': '「',
    '253': '」',
    '254': 'ヴ'
}

const chaoStringEncodingMap = new Map<number, string>();

Object.keys(encoding).forEach(key => {
    chaoStringEncodingMap.set(parseInt(key), encoding[key]);
});

export default chaoStringEncodingMap;

class ChaoString {
    private reverse: Map<string, number>;
    
    constructor() {
        this.reverse = new Map<string, number>();
        chaoStringEncodingMap.forEach((value: string, key: number) => {
            this.reverse.set(value, key);
        });
    }
    
    encode(str: string): Buffer {
        const b: Buffer = Buffer.alloc(7);
        for (let i = 0; i < Math.min(str.length, 7); i++) {
            b.writeUInt8(this.reverse.get(str[i]) as number, i);
        }
        return b;
    }
    
    decode(buf: Buffer): string {
        let name = '';
        for (let i = 0; i < buf.byteLength; i++) {
            name += chaoStringEncodingMap.get(buf.readUInt8(i));
        }
        return name;
    }
}

export const chaoString = new ChaoString();